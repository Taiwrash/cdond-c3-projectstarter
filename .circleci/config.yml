version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      when:
        type: string
      id:
        type: string   
    steps:
      - run:
          name: Destroy environments - Backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
      - run:
          name: Destroy environments - Frontend
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
            TERM: xterm-256color

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: 
      when: 
        type: string
      id: 
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          # when: << parameters.when >>
          when: on_success
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable SUCCESS = 1
            SUCCESS=$(curl -H "token: 2a9e15d6-b9fa-4b1f-a5dc-e3b9643a9b63" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              pwd
              ls -la
              npm run migrations:revert
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore-cache:
          [test-frontend]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test 
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore-cache:
          [test-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      